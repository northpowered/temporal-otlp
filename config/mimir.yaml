multitenancy_enabled: true


# Configure Mimir to use Minio as object storage backend.
common:
  storage:
    backend: s3
    s3:
      endpoint: minio:9000
      access_key_id: superuser
      secret_access_key: supersecret
      insecure: true
      

blocks_storage:
  # storage_prefix: blocks
  s3:
    bucket_name: mimir-blocks
  tsdb:
    dir: /data/ingester

  # bucket_store:
  #   index_cache:
  #     backend: memcached
  #     memcached:
  #       addresses: memcached:11211

  #   chunks_cache:
  #     backend: memcached
  #     memcached:
  #       addresses: memcached:11211

  #   metadata_cache:
  #     backend: memcached
  #     memcached:
  #       addresses: memcached:11211


# Use memberlist, a gossip-based protocol, to enable the 3 Mimir replicas to communicate
memberlist:
  join_members: [ mimir-write-1, mimir-write-2, mimir-write-3 ]

ruler:
  rule_path: /data/ruler
  alertmanager_url: http://127.0.0.1:8080/alertmanager
  ring:
    # Quickly detect unhealthy rulers to speed up the tutorial.
    heartbeat_period: 2s
    heartbeat_timeout: 10s


ruler_storage:
  s3:
    bucket_name:       mimir-ruler
  cache:
    backend: memcached
    memcached:
      addresses: dns+memcached:11211


query_scheduler:
  service_discovery_mode: "ring"


alertmanager:
  data_dir: /data/alertmanager
  fallback_config_file: /etc/alertmanager-fallback-config.yaml
  external_url: http://localhost:9009/alertmanager


alertmanager_storage:
  s3:
    bucket_name: mimir-alertmanager


overrides_exporter:
  ring:
    enabled: true
    wait_stability_min_duration: 30s


limits:
  native_histograms_ingestion_enabled: true


server:
  log_level: debug

