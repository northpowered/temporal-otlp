error_log  /dev/stderr;
pid        /tmp/nginx.pid;
worker_rlimit_nofile 8192;
worker_processes  5;


events {
    worker_connections  4096;  ## Default: 1024
}

http {
    default_type application/octet-stream;
    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log   /dev/stderr  main;
    sendfile     on;
    tcp_nopush   on;


    map $http_x_scope_orgid $ensured_x_scope_orgid {
        default $http_x_scope_orgid;
        "" "anonymous";
    }

    # Loki upstreams

    upstream read {
        server loki-read:3100;
    }

    upstream write {
        server loki-write:3100;
    }

    upstream cluster {
        server loki-read:3100;
        server loki-write:3100;
    }

    # Mimir upstreams

    upstream mimir-write {
        server mimir-write-1:8080 max_fails=1 fail_timeout=5s;
        server mimir-write-2:8080 max_fails=1 fail_timeout=5s;
        server mimir-write-3:8080 max_fails=1 fail_timeout=5s backup;
    }

    upstream mimir-read {
        server mimir-read-1:8080 max_fails=1 fail_timeout=5s;
        server mimir-read-2:8080 max_fails=1 fail_timeout=5s;
        server mimir-read-3:8080 max_fails=1 fail_timeout=5s backup;
    }

    upstream mimir-backend {
        server mimir-backend-1:8080 max_fails=1 fail_timeout=5s;
        server mimir-backend-2:8080 max_fails=1 fail_timeout=5s;
        server mimir-backend-3:8080 max_fails=1 fail_timeout=5s backup;
    }



    # Logs routing
    server {
        listen 80;
        listen 3100;

        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

        location = /ring {
            proxy_pass       http://cluster$request_uri;
        }

        location = /memberlist {
            proxy_pass       http://cluster$request_uri;
        }

        location = /config {
            proxy_pass       http://cluster$request_uri;
        }

        location = /metrics {
            proxy_pass       http://cluster$request_uri;
        }

        location = /ready {
            proxy_pass       http://cluster$request_uri;
        }

        location = /loki/api/v1/push {
            proxy_pass       http://write$request_uri;
        }

        location = /loki/api/v1/tail {
            proxy_pass       http://read$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location ~ /loki/api/.* {
            proxy_pass       http://read$request_uri;
        }
    }

    # Metrics routing
    server {
        listen 9009;
        access_log /dev/stderr  main;

        location = / {
            return 200 'OK';
            auth_basic off;
        }

        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

# Distributor endpoints
    location /distributor {
      proxy_pass      http://mimir-write$request_uri;
    }
    location = /api/v1/push {
      proxy_pass      http://mimir-write$request_uri;
    }
    location /otlp/v1/metrics {
      proxy_pass      http://mimir-write$request_uri;
    }

    # Alertmanager endpoints
    location /alertmanager {
      proxy_pass      http://mimir-backend$request_uri;
    }
    location = /multitenant_alertmanager/status {
      proxy_pass      http://mimir-backend$request_uri;
    }
    location = /api/v1/alerts {
      proxy_pass      http://mimir-backend$request_uri;
    }

    # Ruler endpoints
    location /prometheus/config/v1/rules {
      proxy_pass      http://mimir-backend$request_uri;
    }
    location /prometheus/api/v1/rules {
      proxy_pass      http://mimir-backend$request_uri;
    }
    
    location /prometheus/api/v1/alerts {
      proxy_pass      http://mimir-backend$request_uri;
    }
    location = /ruler/ring {
      proxy_pass      http://mimir-backend$request_uri;
    }

    # Rest of /prometheus goes to the query frontend
    location  /prometheus {
      proxy_pass      http://mimir-read$request_uri;
    }

    # Buildinfo endpoint can go to any component
    location = /api/v1/status/buildinfo {
      proxy_pass      http://mimir-read$request_uri;
    }

    # Compactor endpoint for uploading blocks
    location /api/v1/upload/block/ {
      proxy_pass      http://mimir-backend$request_uri;
    }



        # # https://grafana.com/docs/mimir/latest/references/http-api/#index-page

        # location = / {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /config {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /api/v1/status/config {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /api/v1/status/flags {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /runtime_config {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /services {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /ready {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /metrics {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /debug/pprof {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /debug/fgprof {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /api/v1/status/buildinfo {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /memberlist {
        #     server       http://mimir-cluster$request_uri;
        # }

        # location = /api/v1/user_limits {
        #     server       http://mimir-cluster$request_uri;
        # }

        # # Distributor

        # location = /api/v1/push {
        #     server       http://mimir-distributor$request_uri;
        # }        

        # location = /otlp/v1/metrics {
        #     server       http://mimir-distributor$request_uri;
        # }    

        # location = /distributor/all_user_stats {
        #     server       http://mimir-distributor$request_uri;
        # }    

        # location = /distributor/ha_tracker {
        #     server       http://mimir-distributor$request_uri;
        # }    

        # # Ingester

        # location = /ingester/flush {
        #     server       http://mimir-ingester$request_uri;
        # }    

        # location = /ingester/prepare-shutdown {
        #     server       http://mimir-ingester$request_uri;
        # } 

        # # Distributor + ingester = write

        # location = /ingester/ring {
        #     server       http://mimir-write$request_uri;
        # } 

        # # Querier frontend

        # location = /prometheus {
        #     server       http://mimir-query-frontend$request_uri;
        # } 

    }
}