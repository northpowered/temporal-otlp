error_log  /dev/stderr;
pid        /tmp/nginx.pid;
worker_rlimit_nofile 8192;
worker_processes  5;


events {
    worker_connections  4096;  ## Default: 1024
}

http {
    default_type application/octet-stream;
    # log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    #     '"$request" $body_bytes_sent "$http_referer" '
    #     '"$http_user_agent" "$http_x_forwarded_for"';
    log_format logger-json escape=json '{"source": "nginx-lb", "time": $msec, "resp_body_size": $body_bytes_sent, "host": "$http_host", "address": "$remote_addr", "request_length": $request_length, "method": "$request_method", "uri": "$request_uri", "status": $status,  "user_agent": "$http_user_agent", "resp_time": $request_time, "upstream_addr": "$upstream_addr"}';
    access_log   /dev/stdout  logger-json;
    #access_log   /dev/stderr  main;
    sendfile     on;
    tcp_nopush   on;


    map $http_x_scope_orgid $ensured_x_scope_orgid {
        default $http_x_scope_orgid;
        "" "anonymous";
    }

    # Loki upstreams
    # Singleton upstreams for replicated services

    upstream loki-read {
        server loki-read:3100;
    }

    upstream loki-write {
        server loki-write:3100;
    }

    upstream loki-cluster {
        server loki-read:3100;
        server loki-write:3100;
    }

    # Mimir upstreams
    # Distributed upstreams for separate services

    upstream mimir-write {
        server mimir-write-1:8080 max_fails=1 fail_timeout=5s;
        server mimir-write-2:8080 max_fails=1 fail_timeout=5s;
        server mimir-write-3:8080 max_fails=1 fail_timeout=5s backup;
    }

    upstream mimir-read {
        server mimir-read-1:8080 max_fails=1 fail_timeout=5s;
        server mimir-read-2:8080 max_fails=1 fail_timeout=5s;
        server mimir-read-3:8080 max_fails=1 fail_timeout=5s backup;
    }

    upstream mimir-backend {
        server mimir-backend-1:8080 max_fails=1 fail_timeout=5s;
        server mimir-backend-2:8080 max_fails=1 fail_timeout=5s;
        server mimir-backend-3:8080 max_fails=1 fail_timeout=5s backup;
    }



    # Logs routing to/from Loki cluster
    # Usage:
    # - Promtail (write)
    # - Grafana (read)
    server {
        listen 80;
        listen 3100;

        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

        location = /ring {
            proxy_pass       http://loki-cluster$request_uri;
        }

        location = /memberlist {
            proxy_pass       http://loki-cluster$request_uri;
        }

        location = /config {
            proxy_pass       http://loki-cluster$request_uri;
        }

        location = /metrics {
            proxy_pass       http://loki-cluster$request_uri;
        }

        location = /ready {
            proxy_pass       http://loki-cluster$request_uri;
        }

        location = /loki/api/v1/push {
            proxy_pass       http://loki-write$request_uri;
        }

        location = /loki/api/v1/tail {
            proxy_pass       http://loki-read$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location ~ /loki/api/.* {
            proxy_pass       http://loki-read$request_uri;
        }
    }


    # Metrics routing to/from Mimir cluster
    # Usage:
    # - vm-agents (write)
    # - Grafana (read)
    # - Tempo (remote write for service-graphs)
    # - Loki (Ruler remote write)
    server {
        listen 9009;
        #access_log /dev/stderr  main;

        # Base path routing
        location = / {
            return 200 'OK';
            auth_basic off;
        }

        # Forward X-Scope-OrgID to enable multitenancy
        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

        # Distributor endpoints
        location /distributor {
          proxy_pass      http://mimir-write$request_uri;
        }
        location = /api/v1/push {
          proxy_pass      http://mimir-write$request_uri;
        }
        location /otlp/v1/metrics {
          proxy_pass      http://mimir-write$request_uri;
        }

        # Alertmanager endpoints
        location /alertmanager {
          proxy_pass      http://mimir-backend$request_uri;
        }
        location = /multitenant_alertmanager/status {
          proxy_pass      http://mimir-backend$request_uri;
        }
        location = /api/v1/alerts {
          proxy_pass      http://mimir-backend$request_uri;
        }

        # Ruler endpoints
        location /prometheus/config/v1/rules {
          proxy_pass      http://mimir-backend$request_uri;
        }
        location /prometheus/api/v1/rules {
          proxy_pass      http://mimir-backend$request_uri;
        }
        
        location /prometheus/api/v1/alerts {
          proxy_pass      http://mimir-backend$request_uri;
        }
        location = /ruler/ring {
          proxy_pass      http://mimir-backend$request_uri;
        }

        # Rest of /prometheus goes to the query frontend
        location  /prometheus {
          proxy_pass      http://mimir-read$request_uri;
        }

        # Buildinfo endpoint can go to any component
        location = /api/v1/status/buildinfo {
          proxy_pass      http://mimir-read$request_uri;
        }

        # Compactor endpoint for uploading blocks
        location /api/v1/upload/block/ {
          proxy_pass      http://mimir-backend$request_uri;
        }
    }
}